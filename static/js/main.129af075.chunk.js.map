{"version":3,"sources":["components/ParseJSON/index.js","App.js","serviceWorker.js","index.js"],"names":["CollapsibleArray","props","state","collapsed","toggle","bind","this","setState","onClick","arr","data","map","item","i","array","push","key","React","Component","StandardCollapsibleComponent","collapsibleComponent","arrayItems","j","length","row","hasOwnProperty","ParseJSON","items","text","json","sampleA","Array","isArray","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.129af075.chunk.js","sourcesContent":["\nimport React from 'react';\n\n// does not handle array of arrays or objects inside objects or objects inside arrays\n\nclass CollapsibleArray extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      collapsed: true\n    }\n    this.toggle = this.toggle.bind(this);\n  }\n\n  toggle() {\n    this.setState({\n      collapsed: !this.state.collapsed\n    });\n  }\n  render() {\n    let collapsed = this.state.collapsed;\n    if (collapsed) {\n      return <div><button onClick={this.toggle}>+</button></div>\n    } else {\n      var arr = [];\n\n      this.props.data.map(function(item, i, array) {\n          arr.push(<div key={i}>{item}</div>)\n      })\n\n      return (\n        <div>\n            <div><button onClick={this.toggle}>-</button></div>\n            {arr}\n        </div>\n      );\n    }\n  }\n}\n\nclass StandardCollapsibleComponent extends React.Component {\n  \n  constructor(props) {\n    super(props);\n    this.state = {\n      collapsed: true\n    }\n    this.toggle = this.toggle.bind(this);\n  }\n\n  toggle() {\n    this.setState({\n      collapsed: !this.state.collapsed\n    });\n  }\n\n  render() {\n    let collapsed = this.state.collapsed;\n    let collapsibleComponent;\n    if (collapsed) {\n      collapsibleComponent = <div>&#123;<button onClick={this.toggle}>+</button>&#125;</div>\n    } else {\n      collapsibleComponent =\n      <div> \n        <div>\n          &#123;<button onClick={this.toggle}>-</button>\n        </div>\n        <div>\n          <div>\n            { \n              this.props.data.map(function(item, i, arr) {\n                if(item[2] === \"array\") {\n                  let arrayItems = [];\n                  for (var j = 0; j < item[1].length; j++) {\n                    // arrayItems.push(<li key={i}>{item[1][j]}</li>)\n                    arrayItems.push(item[1][j])\n                  }\n                  return (\n                      <div key={i}>\n                          <div>{item[0]} : [ <CollapsibleArray data={arrayItems}/> ]</div>\n                      </div>\n                  );\n                }\n\n                if(item[2] === \"object\") {\n                  let row = [];\n                  for (var key in item[1]) {\n                    if (item[1].hasOwnProperty(key)) {\n                        row.push([key, item[1][key], \"standard\"]);\n                      }\n                    }\n                  return (\n                      <div key={i}>\n                          <div>{item[0]} : <StandardCollapsibleComponent key={i} data={row}/></div>\n                      </div>\n                  ); \n                }\n\n                if(item[2] === \"standard\") {\n                  if (arr.length - 1 === i) {\n                      return (\n                          <div key={i}>\n                              <div>{item[0]} : &quot;{item[1]}&quot;</div>\n                          </div>\n                        )\n                  } else {\n                      return (<div key={i}>{item[0]} : &quot;{item[1]}&quot;,</div>)\n                  }\n                }\n              })\n            }\n          </div>\n          <div>\n            &#125;\n          </div>\n        </div>\n      </div>\n    }\n    return (\n      <div>\n        { collapsibleComponent }\n      </div>\n    );\n  }\n}\n\n\n\nclass ParseJSON extends React.Component {\n  \n  standardPrint(json, key) {\n    return \"<div class='newLine'><span class='key'>&quot;\" + key + \"&quot;: </span>\" + json[key] +\"</div>\"\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = { items: [], text: '' };\n  }\n\n  render() {\n    let row = [];\n\n    const sampleA = {\n      'a':'b',\n      'c':'d',\n      'e':'f',\n      'g':'h',\n      'd': {\n        'r':'l'\n      },\n      'y': ['a','2']\n    }\n\n    for (var key in sampleA) {\n      if (sampleA.hasOwnProperty(key)) {\n        if( ( typeof (sampleA[key]) ===  \"number\" ) || ( typeof (sampleA[key]) === \"string\" )  || typeof (sampleA[key]) === \"boolean\") {\n          row.push([key, sampleA[key], \"standard\"]);\n        } else if(Array.isArray(sampleA[key])) {\n            row.push([key, sampleA[key], \"array\"]);\n        } else if(typeof(sampleA[key]) === \"object\") {\n            row.push([key, sampleA[key], \"object\"]);\n        } \n      }\n    }\n\n    return (\n      <div>\n        <StandardCollapsibleComponent data={row}/>\n      </div>\n    );\n  }\n}\n\nexport default ParseJSON;","import React from 'react';\nimport './App.css';\nimport ParseJSON from './components/ParseJSON';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <ParseJSON/>\n      </header>\n\n      <div>\n        <h2>Verified JSON Structures : See source code</h2>\n      </div>\n    </div>\n  );\n}\n\n/*\n    const sampleA = {\n      'a':'b',\n      'c':'d',\n      'e':'f',\n      'g':'h',\n      'd': {\n        'r':'l'\n      },\n      'y': ['a','2']\n    }\n*/\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}